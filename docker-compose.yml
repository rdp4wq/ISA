entities1:
    build: ./
    container_name: sugar-entities1
    external_links:
      -  mysql:db
    volumes:
      - ./entities:/app/entities
    command: bash -c "python /app/entities/manage.py makemigrations && python /app/entities/manage.py migrate --noinput && python /app/entities/manage.py loaddata db.json && mod_wsgi-express start-server --working-directory /app/entities --reload-on-changes /app/entities/entities/wsgi.py"

entities2:
    build: ./
    container_name: sugar-entities2
    external_links:
      -  mysql:db
    volumes:
      - ./entities:/app/entities
    command: bash -c "python /app/entities/manage.py makemigrations && python /app/entities/manage.py migrate --noinput && python /app/entities/manage.py loaddata db.json && mod_wsgi-express start-server --working-directory /app/entities --reload-on-changes /app/entities/entities/wsgi.py"

services1:
    build: ./
    container_name: sugar-services1
    links:
       - entities-load-balancer
       - kafka
       - es
    volumes:
       - ./services:/app/services
    command: bash -c "pip install requests && mod_wsgi-express start-server --working-directory /app/services --reload-on-changes /app/services/services/wsgi.py"

services2:
    build: ./
    container_name: sugar-services2
    links:
       - entities-load-balancer
       - kafka
       - es
    volumes:
       - ./services:/app/services
    command: bash -c "pip install requests && mod_wsgi-express start-server --working-directory /app/services --reload-on-changes /app/services/services/wsgi.py"

web1:
    build: ./
    container_name: sugar-web1
    links:
       - services-load-balancer
    volumes:
       - ./web:/app/web
    command: bash -c "pip install requests && mod_wsgi-express start-server --url-alias /static /app/web/webapp/static --working-directory /app/web --reload-on-changes /app/web/web/wsgi.py"

web2:
    build: ./
    container_name: sugar-web2
    links:
       - services-load-balancer
    volumes:
       - ./web:/app/web
    command: bash -c "pip install requests && mod_wsgi-express start-server --url-alias /static /app/web/webapp/static --working-directory /app/web --reload-on-changes /app/web/web/wsgi.py"

kafka:
    image: spotify/kafka
    container_name: kafka
    environment:
       ADVERTISED_HOST: kafka
       ADVERTISED_PORT: 9092
    hostname: kafka

es:
    image: elasticsearch:2.0
    container_name: es
    ports:
       - "9200:9200"

batch:
    image: tp33/django
    container_name: batch
    links:
       - kafka:kafka
       - es:es
    volumes:
       - ./batch:/app/batch
    command: bash -c "python /app/batch/main.py"

selenium:
    image: selenium/standalone-chrome
    container_name: selenium-chrome-standalone
    links:
        - web-load-balancer
    ports:
        - "4444:4444"

# see https://github.com/SeleniumHQ/docker-selenium/issues/79 for /dev/shm volume mount
selenium-main:
    image: tp33/django
    container_name: selenium-main
    links:
       - selenium
       - web-load-balancer
    volumes:
       - ./selenium_tests:/app/selenium_tests
       - /dev/shm:/dev/shm 
    command: bash -c "pip install selenium && python /app/selenium_tests/manage.py test front_end_tests"

web-load-balancer:
    image: galexrt/pen
    container_name: sugar-web
    links:
       - web1
       - web2
    ports:
       - "8001:8000"
    command: 8000 sugar-web1:8000 sugar-web2:8000 -r

services-load-balancer:
    image: galexrt/pen
    container_name: sugar-services
    links:
       - services1
       - services2
    ports:
       - "8002:8000"
    command: 8000 sugar-services1:8000 sugar-services2:8000 -r

entities-load-balancer:
    image: galexrt/pen
    container_name: sugar-entities
    links:
       - entities1
       - entities2
    ports:
       - "8003:8000"
    command: 8000 sugar-entities1:8000 sugar-entities2:8000 -r

spark-master:
  image: gettyimages/spark
  command: bin/spark-class org.apache.spark.deploy.master.Master -h spark-master
  container_name: spark-master
  hostname: spark-master
  environment:
    MASTER: spark://spark-master:7077
    SPARK_CONF_DIR: /conf
  expose:
    - 7001
    - 7002
    - 7003
    - 7004
    - 7005
    - 7006
    - 7077
    - 6066
  ports:
    - 4040:4040
    - 6066:6066
    - 7077:7077
    - 8080:8080
  volumes:
    - ./data:/tmp/data

spark-worker:
  image: gettyimages/spark
  command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  container_name: spark-worker
  hostname: spark-worker
  environment:
    SPARK_CONF_DIR: /conf
    SPARK_WORKER_CORES: 2
    SPARK_WORKER_MEMORY: 512m
    SPARK_WORKER_PORT: 8881
    SPARK_WORKER_WEBUI_PORT: 8081
  links:
    - spark-master
  expose:
    - 7012
    - 7013
    - 7014
    - 7015
    - 7016
    - 8881
  ports:
    - 8081:8081
  volumes:
    - ./data:/tmp/data